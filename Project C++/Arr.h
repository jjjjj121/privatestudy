#pragma once



//가변 배열 자료형

//이 자료형이 배열의 크기가 변하도록 하기 위해선 힙메모리 영역을 사용해야 하고, 이를 관여하기 위해서는 포인터(주소값)을 이용해야한다.
typedef struct _tabArr
{
	//가변 배열이 되기 위한 3종류의 필수 멤버
	int*	pInt;            //int포인터값(주소값) -> 데이터를 저장할 곳의 시작주소
	int		iCount;          //현재까지 들어온 데이터의 갯수 -> 를 알아야 새로운 데이터값이 들어갈 공간이 시작주소로부터 몇 떨어진 곳에 입력을 해야하는지 알 수 있음.
	int		iMaxcount;       //할당된 테이터의 한계치 -> 를 알아야 카운트된 데이터의 갯수와 한계치가 같아졌을때(포화) 새로운 메모리 영역을 다시 할당할 수 있음.



}tArr;

//main함수에서의 위 멤버들을 설정하는 식을 보다 편하게 사용하기  위해 함수로 만들껀데, 이 함수의 역할은 가변배열 기능을 사용하는 구조체의 변수 s를 초기화해주는 역할이다.
//따라서 초기화에 중점이므로 어떤 값을 반환해서 되돌려 받을 이유가 없음. 따라서 반환값이 필요 없음. = void

// 배열 초기화 함수 : 필요한 인자 ( 배열 주소 타입 )
void InitArr(tArr* _pArr);   //이 함수는 위 가변배열 함수를 초기화 하기 위함이므로 위 함수에 접근해서 내용을 수정을 해야함. 따라서 주소값을 알아야 접근해서 내용 수정이 가능하다.
                             //헤더에는 함수의 구현을 하지 않는다. 실질적인 함수 구현은 cpp에다가 할 것. -> 헤더를 참조할 때 함수가 중복으로 구현되는 것을 막기 위함.

//Ctrl + '+', '.' -> 지정한 함수의 정의 만들기 단축키


//데이터 추가 함수 : 필요한 인자 (배열 주소 타입, 들어갈 데이터값)
void PushBack(tArr* _pArr, int _iData);  //지금 이 가변 배열 자료형은 int 자료형을 바탕으로 하고있기 때문에 데이터값도 int



//힙 영역 메모리 공간 추가 할당 : 필요한 인자(배열 주소 타입)
//void Reallocate(tArr* _pArr);               ---------> 헤더파일에서 선언을 할 필요가 없음
//헤더 파일에서 선언 할 필요가 없는 이유
//void Reallocate(tArr* _pArr);의 함수식은 Arr.cpp파일에 존재하고 있기 때문에 Arr.cpp에서 메모리 추가할당을 사용 가능.

//만약 헤더 파일에서 선언을 했을 경우 본래 의도는 메모리가 꽉 찼을 때만 추가 할당을 하고 싶어서 만들었는데, 메모리 공간 추가 할당을 main함수에서 식을 끌어와 써버리면
//메모리가 다 안찼는데도 추가할당이 되는 경우가 되버린다. 사용자가 의도한 대로 만들기 위해서 해더 파일에 선언을 지운것.





//배열 메모리 해제 함수 : 필요한 인자 ( 배열 주소 타입 )

void ReleaseArr(tArr* _pArr);


////정렬 함수
//
//void Sort(tArr* _pArr); //필요 인자 : 배열의 주소값 , 

//버블 정렬 함수(함수 포인터로 함수를 인자로 사용하기.)

void Sort(tArr* _pArr, void(*SortFunc)(int*, int)); //필요 인자 : 배열의 주소값 , 포인터 함수의 주소값
                       //이 함수의 뜻은 반환타입이 void이고 Sort함수 안에 어떤 임의의 sort함수(기능)을 받을껀데, 그 인자는 하나는 int포인터, 하나는 int인 함수의 주소만 받겠다.
                       //BubbleSort 함수의 인자가 Int* , int 이기 때문